clear all
False = 1;
True = 2;
Remove = [];

%%
% 定义节点
 a1 =  1;  r1 =  2;  a2 =  3;  a3 =  4;  a6 =  5;  a7 =  6;  r3 =  7;  r2 =  8;  r5 =  9;  a8 = 10; 
 a4 = 11;  a5 = 12;  r4 = 13;  r6 = 14;  a9 = 15; a10 = 16; a11 = 17; a12 = 18; a13 = 19; a14 = 20; 
a15 = 21; a16 = 22; a17 = 23; a18 = 24; a19 = 25; a20 = 26; a21 = 27; a22 = 28; a23 = 29; a24 = 30; 
a25 = 31; a26 = 32;  f1 = 33;  f2 = 34;  f3 = 35;  f4 = 36;  f5 = 37;  f6 = 38;  f7 = 39;  f8 = 40; 
 f9 = 41; f10 = 42; f11 = 43; f12 = 44;  e1 = 45;  e2 = 46;  e3 = 47;  e4 = 48;  e5 = 49;  e6 = 50; 
 e7 = 51;  x1 = 52;  x2 = 53;  x3 = 54;  x4 = 55;  x5 = 56; 
                    
%%
% 定义 Labels
Labels = {
 'a1',  'r1',  'a2',  'a3',  'a6',  'a7',  'r3',  'r2',  'r5',  'a8',  ... 
 'a4',  'a5',  'r4',  'r6',  'a9', 'a10', 'a11', 'a12', 'a13', 'a14',  ... 
'a15', 'a16', 'a17', 'a18', 'a19', 'a20', 'a21', 'a22', 'a23', 'a24',  ... 
'a25', 'a26',  'f1',  'f2',  'f3',  'f4',  'f5',  'f6',  'f7',  'f8',  ... 
 'f9', 'f10', 'f11', 'f12',  'e1',  'e2',  'e3',  'e4',  'e5',  'e6',  ... 
 'e7',  'x1',  'x2',  'x3',  'x4',  'x5'
};


[~, N] = size(Labels);
Network = zeros(N, N);  

%% 
% 攻击层
Network(a1, r1) = 1;
Network(r1, [a3 a2 a6 a7 a8]) = 1;
Network(a3, r4) = 1;
Network(a2, r3) = 1;
Network(a2, r2) = 1;
Network(a6, r5) = 1;
Network(a7, r6) = 1;
Network(r3, a5) = 1;
Network(r2, a4) = 1;
Network(r5, a8) = 1;
Network(a8, r6) = 1;
Network(a5, r4) = 1;
Network(a4, r4) = 1;
Network([r4 r6], [a9 a10 a11 a12 a13 a14]) = 1;
Network(r6, [a15 a16 a17 a18 a19 a20]) = 1;
Network([r4 r6], [a21 a22 a23 a24 a25 a26]) = 1;


%% 
% 功能层
Network([a9 a15 a21], [f1 f2]) = 1;
Network([10 a16 a22], [f7 f8 f9]) = 1;
Network([a11 a17 a23], f6) = 1;
Network([a12 a18 a24], f5) = 1;
Network([a13 a19 a25], f4) = 1;
Network([a14 a20 a26], f3) = 1;
Network([f1 f2 f3 f7], f10) = 1;
Network([f1 f2 f3 f5 f8], f11) = 1;
Network([f4 f9], f12) = 1;

%%
% 事件层
Network(f10, e1) = 1;
Network(f11, e2) = 1;
Network(f12, e3) = 1;
Network(f6, e7) = 1;
Network(e1, [e4 e6]) = 1;
Network(e3, e5) = 1;

Network([e2 e3 e5 e6 e7], x1) = 1;
Network([e5 e3], x2) = 1;
Network([e4 e5], x3) = 1;
Network(e5, x4) = 1;
Network([e5 e6], x5) = 1;

%%
% 判断邻接矩阵是否为上三角
% R = 1;
% for i = 1:N
%     for j = 1:i
%         if Network(i,j) ~= 0
%             R = 0;
%         end
%     end
% end
% 
% Network
% 
% if R == 1
%     disp('OK!')
% else
%     disp('NO!')
% end

%%
discrete_nodes = 1:N;  
node_sizes= 2 * ones(1, N); 
bnet = mk_bnet(Network, node_sizes, 'names', Labels, 'discrete', discrete_nodes);  

%%
% 条件概率
bnet.CPD{ a1} = tabular_CPD(bnet,  a1, [0.99999999,0.00000001]);
bnet.CPD{ r1} = tabular_CPD(bnet,  r1, [0.99999999,0.00000100,0.00000001,0.99999900]);
bnet.CPD{ a2} = tabular_CPD(bnet,  a2, [0.99999999,0.90000000,0.00000001,0.10000000]);
bnet.CPD{ a3} = tabular_CPD(bnet,  a3, [0.99999999,0.90000000,0.00000001,0.10000000]);
bnet.CPD{ a6} = tabular_CPD(bnet,  a6, [0.99999999,0.90000000,0.00000001,0.10000000]);
bnet.CPD{ a7} = tabular_CPD(bnet,  a7, [0.99999999,0.90000000,0.00000001,0.10000000]);
bnet.CPD{ r3} = tabular_CPD(bnet,  r3, [0.99999999,0.00000100,0.00000001,0.99999900]);
bnet.CPD{ r2} = tabular_CPD(bnet,  r2, [0.99999999,0.00000100,0.00000001,0.99999900]);
bnet.CPD{ r5} = tabular_CPD(bnet,  r5, [0.99999999,0.00000100,0.00000001,0.99999900]);
bnet.CPD{ a5} = tabular_CPD(bnet,  a5, [0.99999999,0.35000000,0.00000001,0.65000000]);
bnet.CPD{ a4} = tabular_CPD(bnet,  a4, [0.99999999,0.35000000,0.00000001,0.65000000]);
bnet.CPD{ a8} = tabular_CPD(bnet,  a8, [0.99999999,0.99999999,0.99999999,0.35000000,0.00000001,0.00000001,0.00000001,0.65000000]);
bnet.CPD{ r6} = tabular_CPD(bnet,  r6, [0.99999999,0.40000000,0.02000000,0.00000001,0.00000001,0.60000000,0.98000000,0.99999999]);
bnet.CPD{ r4} = tabular_CPD(bnet,  r4, [0.99999999,0.40000000,0.02000000,0.02000000,0.02000000,0.02000000,0.02000000,0.00000001,0.00000001,0.60000000,0.98000000,0.98000000,0.98000000,0.98000000,0.98000000,0.99999999]);
bnet.CPD{ a9} = tabular_CPD(bnet,  a9, [0.99999999,0.35000000,0.35000000,0.35000000,0.00000001,0.65000000,0.65000000,0.65000000]);
bnet.CPD{a10} = tabular_CPD(bnet, a10, [0.99999999,0.35000000,0.35000000,0.35000000,0.00000001,0.65000000,0.65000000,0.65000000]);
bnet.CPD{a11} = tabular_CPD(bnet, a11, [0.99999999,0.35000000,0.35000000,0.35000000,0.00000001,0.65000000,0.65000000,0.65000000]);
bnet.CPD{a12} = tabular_CPD(bnet, a12, [0.99999999,0.35000000,0.35000000,0.35000000,0.00000001,0.65000000,0.65000000,0.65000000]);
bnet.CPD{a13} = tabular_CPD(bnet, a13, [0.99999999,0.35000000,0.35000000,0.35000000,0.00000001,0.65000000,0.65000000,0.65000000]);
bnet.CPD{a14} = tabular_CPD(bnet, a14, [0.99999999,0.35000000,0.35000000,0.35000000,0.00000001,0.65000000,0.65000000,0.65000000]);
bnet.CPD{a15} = tabular_CPD(bnet, a15, [0.99999999,0.70000000,0.00000001,0.30000000]);
bnet.CPD{a16} = tabular_CPD(bnet, a16, [0.99999999,0.70000000,0.00000001,0.30000000]);
bnet.CPD{a17} = tabular_CPD(bnet, a17, [0.99999999,0.70000000,0.00000001,0.30000000]);
bnet.CPD{a18} = tabular_CPD(bnet, a18, [0.99999999,0.70000000,0.00000001,0.30000000]);
bnet.CPD{a19} = tabular_CPD(bnet, a19, [0.99999999,0.70000000,0.00000001,0.30000000]);
bnet.CPD{a20} = tabular_CPD(bnet, a20, [0.99999999,0.70000000,0.00000001,0.30000000]);
bnet.CPD{a21} = tabular_CPD(bnet, a21, [0.99999999,0.50000000,0.50000000,0.50000000,0.00000001,0.50000000,0.50000000,0.50000000]);
bnet.CPD{a22} = tabular_CPD(bnet, a22, [0.99999999,0.50000000,0.50000000,0.50000000,0.00000001,0.50000000,0.50000000,0.50000000]);
bnet.CPD{a23} = tabular_CPD(bnet, a23, [0.99999999,0.50000000,0.50000000,0.50000000,0.00000001,0.50000000,0.50000000,0.50000000]);
bnet.CPD{a24} = tabular_CPD(bnet, a24, [0.99999999,0.50000000,0.50000000,0.50000000,0.00000001,0.50000000,0.50000000,0.50000000]);
bnet.CPD{a25} = tabular_CPD(bnet, a25, [0.99999999,0.50000000,0.50000000,0.50000000,0.00000001,0.50000000,0.50000000,0.50000000]);
bnet.CPD{a26} = tabular_CPD(bnet, a26, [0.99999999,0.50000000,0.50000000,0.50000000,0.00000001,0.50000000,0.50000000,0.50000000]);
bnet.CPD{ f1} = tabular_CPD(bnet,  f1, [0.99999999,0.70000000,0.70000000,0.40000000,0.70000000,0.40000000,0.40000000,0.11500000,0.00000001,0.30000000,0.30000000,0.60000000,0.30000000,0.60000000,0.60000000,0.88500000]);
bnet.CPD{ f2} = tabular_CPD(bnet,  f2, [0.99999999,0.70000000,0.70000000,0.40000000,0.70000000,0.40000000,0.40000000,0.11500000,0.00000001,0.30000000,0.30000000,0.60000000,0.30000000,0.60000000,0.60000000,0.88500000]);
bnet.CPD{ f3} = tabular_CPD(bnet,  f3, [0.99999999,0.70000000,0.70000000,0.40000000,0.70000000,0.40000000,0.40000000,0.11500000,0.00000001,0.30000000,0.30000000,0.60000000,0.30000000,0.60000000,0.60000000,0.88500000]);
bnet.CPD{ f4} = tabular_CPD(bnet,  f4, [0.99999999,0.70000000,0.70000000,0.40000000,0.70000000,0.40000000,0.40000000,0.11500000,0.00000001,0.30000000,0.30000000,0.60000000,0.30000000,0.60000000,0.60000000,0.88500000]);
bnet.CPD{ f5} = tabular_CPD(bnet,  f5, [0.99999999,0.70000000,0.70000000,0.40000000,0.70000000,0.40000000,0.40000000,0.11500000,0.00000001,0.30000000,0.30000000,0.60000000,0.30000000,0.60000000,0.60000000,0.88500000]);
bnet.CPD{ f6} = tabular_CPD(bnet,  f6, [0.99999999,0.70000000,0.70000000,0.40000000,0.70000000,0.40000000,0.40000000,0.11500000,0.00000001,0.30000000,0.30000000,0.60000000,0.30000000,0.60000000,0.60000000,0.88500000]);
bnet.CPD{ f7} = tabular_CPD(bnet,  f7, [0.99999999,0.70000000,0.70000000,0.40000000,0.70000000,0.40000000,0.40000000,0.11500000,0.00000001,0.30000000,0.30000000,0.60000000,0.30000000,0.60000000,0.60000000,0.88500000]);
bnet.CPD{ f8} = tabular_CPD(bnet,  f8, [0.99999999,0.70000000,0.70000000,0.40000000,0.70000000,0.40000000,0.40000000,0.11500000,0.00000001,0.30000000,0.30000000,0.60000000,0.30000000,0.60000000,0.60000000,0.88500000]);
bnet.CPD{ f9} = tabular_CPD(bnet,  f9, [0.99999999,0.70000000,0.70000000,0.40000000,0.70000000,0.40000000,0.40000000,0.11500000,0.00000001,0.30000000,0.30000000,0.60000000,0.30000000,0.60000000,0.60000000,0.88500000]);
bnet.CPD{f10} = tabular_CPD(bnet, f10, [0.99999999,0.99999999,0.99999998,0.50000000,0.99999997,0.54000000,0.34000000,0.14000000,0.99999998,0.67000000,0.64000000,0.32000000,0.45000000,0.14000000,0.15000000,0.14000000,0.00000001,0.00000001,0.00000002,0.50000000,0.00000003,0.46000000,0.66000000,0.86000000,0.00000002,0.33000000,0.36000000,0.68000000,0.55000000,0.86000000,0.85000000,0.86000000]);
bnet.CPD{f11} = tabular_CPD(bnet, f11, [0.99999999,0.99999998,0.99999997,0.80000000,0.99999994,0.99999950,0.99400000,0.92000000,0.99999996,0.70000000,0.55000000,0.68000000,0.60000000,0.59000000,0.69450000,0.44000000,0.99999997,0.99999991,0.80000000,0.64000000,0.77440000,0.54770000,0.65000000,0.44770000,0.75000000,0.54790000,0.53000000,0.13935000,0.97700000,0.23000000,0.35000000,0.16000000,0.00000001,0.00000002,0.00000003,0.20000000,0.00000006,0.00000050,0.00600000,0.08000000,0.00000004,0.30000000,0.45000000,0.32000000,0.40000000,0.41000000,0.30550000,0.56000000,0.00000003,0.00000009,0.20000000,0.36000000,0.22560000,0.45230000,0.35000000,0.55230000,0.25000000,0.45210000,0.47000000,0.86065000,0.02300000,0.77000000,0.65000000,0.84000000]);
bnet.CPD{f12} = tabular_CPD(bnet, f12, [0.99999999,0.50000000,0.50000000,0.20000000,0.00000001,0.50000000,0.50000000,0.80000000]);
bnet.CPD{ e1} = tabular_CPD(bnet,  e1, [0.99999997,0.20000000,0.00000003,0.80000000]);
bnet.CPD{ e2} = tabular_CPD(bnet,  e2, [0.99999997,0.13340000,0.00000003,0.86660000]);
bnet.CPD{ e3} = tabular_CPD(bnet,  e3, [0.99999999,0.32300000,0.00000001,0.67700000]);
bnet.CPD{ e7} = tabular_CPD(bnet,  e7, [0.99999998,0.10000000,0.00000002,0.90000000]);
bnet.CPD{ e4} = tabular_CPD(bnet,  e4, [0.99999999,0.74350000,0.00000001,0.25650000]);
bnet.CPD{ e5} = tabular_CPD(bnet,  e5, [0.99999997,0.90000000,0.00000003,0.10000000]);
bnet.CPD{ e6} = tabular_CPD(bnet,  e6, [0.99999998,0.84400000,0.00000002,0.15600000]);
bnet.CPD{ x3} = tabular_CPD(bnet,  x3, [1.00000000,0.00000000,0.00000000,0.00000000,0.00000000,1.00000000,1.00000000,1.00000000]);
bnet.CPD{ x4} = tabular_CPD(bnet,  x4, [1.00000000,0.00000000,0.00000000,1.00000000]);
bnet.CPD{ x1} = tabular_CPD(bnet,  x
bnet.CPD{ x2} = tabular_CPD(bnet,  x2, [1.00000000,0.00000000,0.00000000,0.00000000,0.00000000,1.00000000,1.00000000,1.00000000]);
bnet.CPD{ x5} = tabular_CPD(bnet,  x5, [1.00000000,0.00000000,0.00000000,0.00000000,0.00000000,1.00000000,1.00000000,1.00000000]);


%%
% 画图
% [x,y] = draw_graph(Network, Labels);

%%
engine=jtree_inf_engine(bnet);  
% evidence{a2}= True;

%%
% 动态过程
%       1    2    3    4    5    6    7    8    9   10
E = [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, ...  0x
        0,   0,   0,   0,   0,   0,   0,   0,   0,   0, ...  1x
        0,   0,   0,   0,   0,   0,   0,   0,   0,   0, ...  2x
        0,   0,   0,   0,   0,   0,   0,   0,   0,   0, ...  3x
        0,   0,   0,   0,   0,   0,   0,   0,   0,  a1, ...  4x
       a1,  a1,  a1,  a1,  a1,  a1,  a1,  a1,  a1,  a1, ...  5x
        0,   0,   0,   0,   0,   0,   0,   0,   0,   0, ...  6x
        0,   0,   0,   0,  a2,  a2,  a2,  a2,  a2,  a2, ...  7x
       a2,  a2,  a2,  a2,  a2,  a2,  a2,  a2,  a2,  a2, ...  8x
       a2,  a2,  a2,  a2,  a2,  a2,  a2,  a2,  a2,  a2, ...  9x
       a2,  a2,  a2,  a2,  a2,  a2,  a2,  a2,  a2,  a2, ... 10x
        0,   0,   0,   0,   0,   0,   0,   0,   0,  a6, ... 11x
       a6,  a6,  a6,  a6,  a6,  a6,  a6,  a6,  a6,  a6, ... 12x
       a6,  a6,  a6,  a6,  a6,  a6,  a6,  a6,  a6,  a6, ... 13x
       a6,  a6,  a6,  a6,  a6,  a6,  a6,  a6,  a6,  a6, ... 14x
       a6,  a6,  a6,  a6,  a6,  a6,  a6,  a6,  a6,  a6, ... 15x
       a6,  a6,  a6,  a6,  a6,  a6,  a6,  a6,  a6,  a6, ... 16x
       a6,  a6,  a6,  a6,  a6,  a6,  a6,  a6,  a6,  a6, ... 17x
        0,   0,   0,   0,   0,   0,   0,   0,   0,   0, ... 18x
        0,   0,   0,   0,   0,   0,   0,   0,   0,  a8, ... 19x
       a8,  a8,  a8,  a8,  a8,  a8,  a8,  a8,  a8,  a8, ... 20x
       a8,  a8,  a8,  a8,  a8,  a8,  a8,  a8,  a8,  a8, ... 21x
        0,   0,   0,   0,   0,   0,   0,   0,   0,   0, ... 22x
        0,   0,   0,   0,   0,   0,   0,   0,   0,   0, ... 23x
        0,   0,   0,   0,   0,   0,   0,   0,   0, a19, ... 24x
      a19, a19, a19, a19, a19, a19, a19, a19, a19, a19, ... 25x
      a19, a19, a19, a19, a19, a19, a19, a19, a19, a19, ... 26x
      f12,   0,   0,   0,   0,   0,   0,   0,   0,   0, ... 27x
        0,   0,   0,   0,   0,   0,   0,   0,   0,   0, ... 28x
        0,   0,   0,   0,   0,   0,   0,   0,   0,   0, ... 29x
        0,   0,   0,   0,   0,   0,   0,   0,   0,   0, ... 30x
        0,   0,   0,   0,   0,   0,   0,   0,   0,   0, ... 31x
        0,   0,   0,   0,   0,   0,   0,   0,   0,   0, ... 32x
        0,   0,   0,   0,   0,   0,   0,   0,   0,   0, ... 33x
        0,   0,   0,   0,   0,   0,   0,   0,   0,   0, ... 34x
        0,   0,   0,   0,   0,   0,   0,   0,   0,   0, ... 35x
        0,   0,   0,   0,   0,   0,   0,   0,   0,   0, ... 36x
        0,   0,   0,   0,   0,   0,   0,   0,   0,   0, ... 37x
        0,   0,   0,   0,   0,   0,   0,   0,   0,  e3, ... 38x
        0,   0,   0,   0,   0,   0,   0,   0,   0,-f12, ... 39x
        0,   0,   0,   0,   0,   0,   0,   0,   0, -e3, ... 40x
        0,   0,   0,   0,   0,   0,   0,   0,   0,   0, ... 41x
        0,   0,   0,   0,   0,   0,   0,   0,   0,   0, ... 42x
        0,   0,   0,   0,   0,   0,   0,   0,   0,   0];  % 43x
    
T = 1:size(E, 2);
CalcTime = zeros(1, size(E, 2));
MaxTime = max(T);
ESet = cell(1, N);
TimeThreshold = 150;
LastTime = 0;

px1 = zeros(1,MaxTime);
px2 = zeros(1,MaxTime);
px3 = zeros(1,MaxTime);
px4 = zeros(1,MaxTime);
px5 = zeros(1,MaxTime);

pe1 = zeros(1,MaxTime); 
pe2 = zeros(1,MaxTime); 
pe3 = zeros(1,MaxTime); 
pe4 = zeros(1,MaxTime); 
pe5 = zeros(1,MaxTime); 
pe6 = zeros(1,MaxTime); 
pe7 = zeros(1,MaxTime); 

for i = 1:MaxTime
    % Find evidence in evidence list E and time list T
    [Evidence, Time] = FindEvidence(E, T, i);

    % If T > T, remove all attack evidences from ESet
    if Time - LastTime > TimeThreshold
        for j = 1:N
            if Labels{j}(1) == 'a'
                ESet{j} = [];
            end
        end
    end
    
    % If there is no evidence
    if Evidence == 0;
        % Continue loop
    else
        if Evidence < 0;
        % If Evidence < 0, it represents that the evidence is function loss or
        % incidenc, and the broken function has been fixed up. Remove the evidence from the ESet.
            ESet{-Evidence} = [];
        else
        % If Evidence > 0, it means that we need to add the Evidence into ESet
            ESet{Evidence} = True;
            if Labels{Evidence}(1) == 'a'
                LastTime = Time;
            end            
        end
    end
           
    tic;
    [engine,loglik]=enter_evidence(engine,ESet);
    m=marginal_nodes(engine, x1);  
    px1(1,i) = m.T(2);
    m=marginal_nodes(engine, x2);  
    px2(1,i) = m.T(2);
    m=marginal_nodes(engine, x3);  
    px3(1,i) = m.T(2);
    m=marginal_nodes(engine, x4);  
    px4(1,i) = m.T(2);
    m=marginal_nodes(engine, x5);  
    px5(1,i) = m.T(2);  
    CalcTime(1, i) = toc;
    
%     m=marginal_nodes(engine, e1);  
%     pe1(1,i) = m.T(2); 
%     m=marginal_nodes(engine, e2);  
%     pe2(1,i) = m.T(2); 
%     try
%         m=marginal_nodes(engine, e3);  
%         pe3(1,i) = m.T(2); 
%     catch
%      	pe3(1,i) = 1;
%     end
%     
%     m=marginal_nodes(engine, e4);  
%     pe4(1,i) = m.T(2); 
%     m=marginal_nodes(engine, e5);  
%     pe5(1,i) = m.T(2); 
%     m=marginal_nodes(engine, e6);  
%     pe6(1,i) = m.T(2); 
%     m=marginal_nodes(engine, e7);  
%     pe7(1,i) = m.T(2); 
end

subplot(2,1,1);
% plot(1:MaxTime, px1, ':');
% hold on;
% plot(1:MaxTime, px2, '--');
% hold on;
% plot(1:MaxTime, px3, '-.');
% hold on;
% plot(1:MaxTime, px4);
% hold on;
% plot(1:MaxTime, px5, 'LineWidth',2);

% px1z = [(1:MaxTime)',px1'];
% save px1.dat px1z -ascii;
% 
% px2z = [(1:MaxTime)',px2'];
% save px2.dat px2z -ascii;
% 
% px3z = [(1:MaxTime)',px3'];
% save px3.dat px3z -ascii;
% 
% px4z = [(1:MaxTime)',px4'];
% save px4.dat px4z -ascii;
% 
% px5z = [(1:MaxTime)',px5'];
% save px5.dat px5z -ascii;

pe1z = [(1:MaxTime)',pe1'];
save pe1.dat pe1z -ascii;
pe2z = [(1:MaxTime)',pe2'];
save pe2.dat pe2z -ascii;
pe3z = [(1:MaxTime)',pe3'];
save pe3.dat pe3z -ascii;
pe4z = [(1:MaxTime)',pe4'];
save pe4.dat pe4z -ascii;
pe5z = [(1:MaxTime)',pe5'];
save pe5.dat pe5z -ascii;
pe6z = [(1:MaxTime)',pe6'];
save pe6.dat pe6z -ascii;
pe7z = [(1:MaxTime)',pe7'];
save pe7.dat pe7z -ascii;

xlabel('Time','Interpreter','latex');
ylabel('Probability','Interpreter','latex');
set(legend('Production','Tank','Heater','Staff$_{1-4}$, Sensors, Air','Staff$_{5-9}$, Water'),'Interpreter','latex'); 


subplot(2,1,2);
Loss = [50000, 500000, 10000, 30000, 25000];
Risk = [px1; px2; px3; px4; px5]' * Loss';
plot(1:MaxTime, Risk);
pr1z = [(1:MaxTime)',Risk];
xlabel('Time','Interpreter','latex');
ylabel('Risk','Interpreter','latex');
save pr1.dat pr1z -ascii;

figure
Density(CalcTime, 0.0001);